// Code generated by hertz generator.

package Practice

import (
	"auth/biz/adaptor"
	"auth/biz/application/dto/Auth/Practice"
	"auth/biz/application/service"
	"context"

	"github.com/cloudwego/hertz/pkg/app"
	hconsts "github.com/cloudwego/hertz/pkg/protocol/consts"
)

// 创建服务实例
var authService = service.NewAuthService()

// SendVerificationCode 发送验证码
// @router /api/auth/send-code [POST]
func SendVerificationCode(ctx context.Context, c *app.RequestContext) {
	var req Practice.SendVerificationCodeReq
	if err := c.BindAndValidate(&req); err != nil {
		c.JSON(hconsts.StatusBadRequest, &Practice.SendVerificationCodeResp{
			Code: 1001, // 参数错误
			Msg:  "参数错误: " + err.Error(),
		})
		return
	}

	// 调用服务层发送验证码
	response, err := authService.SendVerificationCode(ctx, &req)

	// 返回响应
	adaptor.PostProcess(ctx, c, &req, response, err)
}

// VerifyCode 验证验证码
// @router /api/auth/verify-code [POST]
func VerifyCode(ctx context.Context, c *app.RequestContext) {
	var req Practice.VerifyCodeReq
	if err := c.BindAndValidate(&req); err != nil {
		c.JSON(hconsts.StatusBadRequest, &Practice.VerifyCodeResp{
			Code:  1001, // 参数错误
			Msg:   "参数错误: " + err.Error(),
			Valid: false,
		})
		return
	}

	// 调用服务层验证验证码
	response, err := authService.VerifyCode(ctx, &req)

	// 返回响应
	adaptor.PostProcess(ctx, c, &req, response, err)
}

// Register 用户注册
// @router /api/auth/register [POST]
func Register(ctx context.Context, c *app.RequestContext) {
	var req Practice.RegisterReq
	if err := c.BindAndValidate(&req); err != nil {
		c.JSON(hconsts.StatusBadRequest, adaptor.ResponseData{
			Code: 1001, // 参数错误
			Msg:  "参数错误: " + err.Error(),
		})
		return
	}

	// 调用服务层注册用户
	response, err := authService.Register(ctx, &req)

	// 返回响应
	adaptor.PostProcess(ctx, c, &req, response, err)
}

// Login 用户登录
// @router /api/auth/login [POST]
func Login(ctx context.Context, c *app.RequestContext) {
	var req Practice.LoginReq
	if err := c.BindAndValidate(&req); err != nil {
		c.JSON(hconsts.StatusBadRequest, adaptor.ResponseData{
			Code: 1001, // 参数错误
			Msg:  "参数错误: " + err.Error(),
		})
		return
	}

	// 获取客户端IP地址
	// TODO：IP是否真实
	clientIP := c.ClientIP()

	// 调用服务层登录
	response, err := authService.Login(ctx, &req, clientIP)

	// 返回响应
	adaptor.PostProcess(ctx, c, &req, response, err)
}

// GetUserInfo 获取用户信息
// @router /api/auth/user-info [GET]
func GetUserInfo(ctx context.Context, c *app.RequestContext) {
	var req Practice.GetUserInfoReq
	if err := c.BindAndValidate(&req); err != nil {
		c.JSON(hconsts.StatusBadRequest, &Practice.GetUserInfoResp{
			Code: 1001, // 参数错误
			Msg:  "参数错误: " + err.Error(),
		})
		return
	}

	// 从上下文中获取用户信息
	userID, _ := c.Get("userId")
	userEmail, _ := c.Get("userEmail")

	// 转换为字符串
	var userIDStr, userEmailStr string
	if userID != nil {
		userIDStr = userID.(string)
	}
	if userEmail != nil {
		userEmailStr = userEmail.(string)
	}

	// 调用服务层获取用户信息
	response, err := authService.GetUserInfo(ctx, userIDStr, userEmailStr)

	// 返回响应
	adaptor.PostProcess(ctx, c, &req, response, err)
}

// KickUser 踢出用户
// @router /api/auth/kick [POST]
func KickUser(ctx context.Context, c *app.RequestContext) {
	var req Practice.KickUserReq
	if err := c.BindAndValidate(&req); err != nil {
		c.JSON(hconsts.StatusBadRequest, &Practice.KickUserResp{
			Code:    1001, // 参数错误
			Msg:     "参数错误: " + err.Error(),
			Message: "参数错误",
		})
		return
	}

	// 从上下文中获取当前用户信息（管理员）
	currentUserID, _ := c.Get("userId")

	// 转换为字符串
	var currentUserIDStr string
	if currentUserID != nil {
		currentUserIDStr = currentUserID.(string)
	}

	// 调用服务层踢出用户
	response, err := authService.KickUser(ctx, &req, currentUserIDStr)

	// 返回响应
	adaptor.PostProcess(ctx, c, &req, response, err)
}
